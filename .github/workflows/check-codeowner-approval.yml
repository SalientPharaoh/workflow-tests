name: Check Codeowner Approval

on:
  pull_request_review:
    types: [submitted, edited, dismissed]

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  check-codeowner-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );
            console.log(files.map(f => f.filename));
            
            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              {
                owner: owner,
                repo: repo,
                pull_number: prNumber,
                per_page: 100,
              }
            );
            console.log("=== REVIEWS ===");
            for (const r of reviews) {
              console.log(`${r.user.login}: ${r.state}`);
            }
            const fs = require('fs');
            const core = require('@actions/core');
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            
            const auth = process.env.AUTH_TOKEN;
            console.log(`Checking CODEOWNERS for PR #${prNumber} in ${owner}/${repo}`);

            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner, repo, pull_number: prNumber, per_page: 100,
            });
            const changedFiles = files.map(f => f.filename);
            console.log("Changed files:", changedFiles);
            
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner, repo, pull_number: prNumber, per_page: 100,
            });
            const approvedUsers = [
              ...new Set(reviews.filter(r => r.state === "APPROVED").map(r => r.user.login))
            ];
            console.log("Approved reviewers:", approvedUsers);

            let codeownersPath = "";
            if (fs.existsSync(".github/CODEOWNERS")) codeownersPath = ".github/CODEOWNERS";
            else if (fs.existsSync("CODEOWNERS")) codeownersPath = "CODEOWNERS";
            else {
              core.setFailed("No CODEOWNERS file found.");
              return;
            }
            
            console.log(`Using CODEOWNERS file: ${codeownersPath}`);
            const lines = fs.readFileSync(codeownersPath, "utf8")
              .split("\n")
              .map(l => l.trim())
              .filter(l => l && !l.startsWith("#"));

            const rules = lines.map(line => {
              const [pattern, ...owners] = line.split(/\s+/);
              return { pattern, owners };
            });

            let missingApproval = false;

            for (const file of changedFiles) {
              let matchedOwners = [];
              for (const { pattern, owners } of rules) {
                if (file === pattern || file.endsWith(`/${pattern}`) || pattern === "*") {
                  matchedOwners = owners;
                }
              }

              if (matchedOwners.length === 0) {
                console.log(`File '${file}' has no CODEOWNERS entry - skipping approval check.`);
                continue;
              }

              console.log(`File '${file}' owned by: ${matchedOwners.join(" ")}`);
              let approved = false;
              
              for (const ownerRef of matchedOwners) {
                if (!ownerRef.startsWith("@")) continue;
                const username = ownerRef.slice(1);

                if (username.includes("/")) {
                  const [org, team] = username.split("/");
                  console.log(`Checking team '${team}' members from org '${org}'...`);

                  const res = await fetch(`https://api.github.com/orgs/${org}/teams/${team}/members?per_page=100`, {
                    headers: { Authorization: `Bearer ${auth}`, Accept: "application/vnd.github+json" }
                  });
                  const data = await res.json();

                  if (Array.isArray(data)) {
                    const members = data.map(m => m.login);
                    if (members.some(m => approvedUsers.includes(m))) {
                      approved = true;
                      break;
                    }
                  } else {
                    console.log(`Could not resolve team '${org}/${team}':`, data);
                  }
                } else {
                  if (approvedUsers.includes(username)) {
                    approved = true;
                    break;
                  }
                }
              }

              if (!approved) {
                console.log(`File '${file}' has no CODEOWNER approval.`);
                missingApproval = true;
              } else {
                console.log(`File '${file}' is approved.`);
              }
            }

            if (missingApproval) {
              core.setFailed("Missing required CODEOWNER approval(s).");
            } else {
              console.log("All CODEOWNERS have approved âœ…");
            }
