name: Check Codeowner Approval

on:
  pull_request_review:
    types: [submitted, edited, dismissed]

permissions:
  contents: read
  pull-requests: read

jobs:
  check-codeowner-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Fetch CODEOWNERS file
        id: fetch-codeowners
        env:
          AUTH_TOKEN: ${{ secrets.TEST_SECRET }}
        run: |
          if [ -z "${{ secrets.TEST_SECRET }}" ]; then
            echo "TEST_SECRET is NOT set"
          else
            echo "TEST_SECRET is set (value is masked)"
          fi
          
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GITHUB_TOKEN is NOT set"
          else
            echo "GITHUB_TOKEN is set (value is masked)"
          fi
          
          echo "Fetching CODEOWNERS file..."
          if [ -f .github/CODEOWNERS ]; then
            echo "CODEOWNERS file found"
            cat .github/CODEOWNERS
            # Extract codeowners (lines starting with * or paths)
            # Remove comments and empty lines, then extract usernames
            CODEOWNERS=$(grep -v '^#' .github/CODEOWNERS | grep -v '^$' | grep -oE '@[a-zA-Z0-9_-]+' | tr -d '@' | paste -sd ',' -)
            echo "codeowners=$CODEOWNERS" >> $GITHUB_OUTPUT
            echo "Codeowners: $CODEOWNERS"
          else
            echo "CODEOWNERS file not found"
            echo "codeowners=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Get PR reviews
        id: get-reviews
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          echo "Fetching reviews for PR #$PR_NUMBER..."
          REVIEWS=$(gh api repos/$REPO/pulls/$PR_NUMBER/reviews --jq '.[] | select(.state == "APPROVED") | .user.login' | paste -sd ',' -)
          echo "Approved by: $REVIEWS"
          echo "reviews=$REVIEWS" >> $GITHUB_OUTPUT
          
      - name: Check if codeowner approved
        id: check-approval
        env:
          CODEOWNERS: ${{ steps.fetch-codeowners.outputs.codeowners }}
          REVIEWS: ${{ steps.get-reviews.outputs.reviews }}
        run: |
          echo "Codeowners: $CODEOWNERS"
          echo "Approved by: $REVIEWS"
          
          if [ -z "$CODEOWNERS" ]; then
            echo "No codeowners found"
            exit 1
          fi
          
          if [ -z "$REVIEWS" ]; then
            echo "❌ No approvals found for this PR"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Convert comma-separated lists to arrays
          IFS=',' read -ra CODEOWNER_ARRAY <<< "$CODEOWNERS"
          IFS=',' read -ra REVIEW_ARRAY <<< "$REVIEWS"
          
          # Check if any reviewer is a codeowner
          APPROVED=false
          for reviewer in "${REVIEW_ARRAY[@]}"; do
            for codeowner in "${CODEOWNER_ARRAY[@]}"; do
              if [ "$reviewer" == "$codeowner" ]; then
                echo "✅ PR approved by codeowner: $reviewer"
                APPROVED=true
                break 2
              fi
            done
          done
          
          if [ "$APPROVED" = true ]; then
            echo "approved=true" >> $GITHUB_OUTPUT
            echo "✅ Codeowner approval requirement met"
          else
            echo "approved=false" >> $GITHUB_OUTPUT
            echo "❌ PR not approved by any codeowner"
            echo "Required approval from one of: $CODEOWNERS"
            exit 1
          fi
